{"version":3,"sources":["Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","date","Date","toLocaleTimeString","timerId","window","setInterval","setState","this","prevProps","prev","name","next","props","console","log","clearInterval","className","Component","getRandomName","value","Math","random","toString","slice","App","clockName","hasClock","randomName","document","addEventListener","event","preventDefault","ReactDOM","render","getElementById"],"mappings":"6MAUaA,EAAb,4MACEC,MAAyB,CACvBC,MAAM,IAAIC,MAAOC,sBAFrB,EAKEC,QAAUC,OAAOC,aAAY,WAC3B,EAAKC,SAAS,CAAEN,MAAM,IAAIC,MAAOC,yBAChC,KAPL,uDASE,WACE,OAAOK,KAAKJ,UAVhB,gCAaE,SAAmBK,GACjB,IAAcC,EAASD,EAAfE,KACMC,EAASJ,KAAKK,MAApBF,KAEJD,IAASE,GAEXE,QAAQC,IAAR,uBAA4BL,EAA5B,eAAuCE,MAnB7C,kCAuBE,WACEI,cAAcR,KAAKJ,WAxBvB,oBA2BE,WACE,OACE,sBAAKa,UAAU,QAAf,UACE,iCACGT,KAAKK,MAAMF,OAEb,YACD,+BACGH,KAAKR,MAAMC,cAnCtB,GAA2BiB,aCL3B,SAASC,IACP,IAAMC,EAAQC,KAAKC,SAASC,WAAWC,MAAM,EAAG,GAEhD,MAAM,SAAN,OAAgBJ,GAQX,IAAMK,EAAb,4MACEzB,MAAQ,CACN0B,UAAWP,IACXQ,UAAU,GAHd,EAMEC,WAAavB,OAAOC,aAAY,WAC9B,EAAKC,SAAS,CAAEmB,UAAWP,QAC1B,MARL,uDAUE,WAAqB,IAAD,OAUlB,OATAU,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBACN,EAAKzB,SAAS,CAAEoB,UAAU,OAG5BE,SAASC,iBAAiB,SAAS,WACjC,EAAKvB,SAAS,CAAEoB,UAAU,OAGrBnB,KAAKoB,aApBhB,kCAuBE,WACEZ,cAAcR,KAAKoB,cAxBvB,oBA2BE,WACE,MAAgCpB,KAAKR,MAA7B2B,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,UAElB,OACE,sBAAKT,UAAU,MAAf,UACE,6CACCU,GAAY,cAAC,EAAD,CAAOhB,KAAMe,WAjClC,GAAyBR,aCbzBe,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,W","file":"static/js/main.99305de7.chunk.js","sourcesContent":["import { Component } from 'react';\n\ntype Props = {\n  name: string,\n};\n\ntype State = {\n  date: string,\n};\n\nexport class Clock extends Component<Props, State> {\n  state: Readonly<State> = {\n    date: new Date().toLocaleTimeString(),\n  };\n\n  timerId = window.setInterval(() => {\n    this.setState({ date: new Date().toLocaleTimeString() });\n  }, 1000);\n\n  componentDidMount() {\n    return this.timerId;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { name: prev } = prevProps;\n    const { name: next } = this.props;\n\n    if (prev !== next) {\n      // eslint-disable-next-line no-console\n      console.log(`Renamed from ${prev} to ${next}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    return (\n      <div className=\"Clock\">\n        <strong>\n          {this.props.name}\n        </strong>\n        {' time is '}\n        <span>\n          {this.state.date}\n        </span>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\n\nimport './App.scss';\nimport { Clock } from './Clock';\n\nfunction getRandomName(): string {\n  const value = Math.random().toString().slice(2, 6);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  clockName: string,\n  hasClock: boolean,\n};\n\nexport class App extends Component<{}, State> {\n  state = {\n    clockName: getRandomName(),\n    hasClock: true,\n  };\n\n  randomName = window.setInterval(() => {\n    this.setState({ clockName: getRandomName() });\n  }, 3300);\n\n  componentDidMount() {\n    document.addEventListener('contextmenu', (event) => {\n      event.preventDefault();\n      this.setState({ hasClock: false });\n    });\n\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n\n    return this.randomName;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.randomName);\n  }\n\n  render() {\n    const { hasClock, clockName } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        {hasClock && <Clock name={clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}